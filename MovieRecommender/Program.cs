using Newtonsoft.Json;
using System.Diagnostics;

namespace MovieRecommender
{
    internal static class Program
    {
        /// <summary>
        ///  The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            // To customize application configuration such as set high DPI settings or default font,
            // see https://aka.ms/applicationconfiguration.
            ApplicationConfiguration.Initialize();
            /*Program.GetRecommendations(new[] { 680, 155 }, (Pocos.RecommenderResult[] results) => { 
                foreach (var v in results)
                    Console.WriteLine(v);
            }); */
            Application.Run(new Form1());

        }

        public static void GetRecommendations(IEnumerable<int> ids, double ratingWeight, Action<Pocos.RecommenderResult[]> onResult )
        {
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = "C:/Users/maxim/AppData/Local/Programs/Python/Python310/python.exe";
            //start.Arguments = string.Format("\"{0}\" \"{1}\"", cmd, args);
            start.Arguments = "recommender.py "+String.Join(",",ids)+" "+ratingWeight;
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            
            Process process = new Process();
            process.EnableRaisingEvents = true;
            process.StartInfo = start;

            Pocos.RecommenderResult[]? results = { };

            process.ErrorDataReceived += (sender, e) =>
            {
                if (!String.IsNullOrEmpty(e.Data))
                {
                    Console.WriteLine(e.Data);
                }
            };

            process.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
            {
                // Prepend line numbers to each line of the output.
                if (!String.IsNullOrEmpty(e.Data))
                {
                    results = JsonConvert.DeserializeObject<Pocos.RecommenderResult[]>(e.Data);                    
                }
            });

            process.Exited += (sender, e) =>
            {
                Console.WriteLine("process exited");
                onResult(results);
            };
            process.Start();

            process.BeginErrorReadLine();
            process.BeginOutputReadLine();
            process.WaitForExit();

        }
    }
}